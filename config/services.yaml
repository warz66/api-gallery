# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    site_nom: '%env(SITE_NOM)%'
    galerie_content_path: '/img/indatabase/galerie/content/'
    galerie_cover_path: '/img/indatabase/galerie/cover/'
    google_recaptcha_v3_secret: '%env(GOOGLE_RECAPTCHA_V3_SECRET)%'
    google_recaptcha_v3_site_key: '%env(GOOGLE_RECAPTCHA_V3_SITE_KEY)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\EventListener\DeleteFileListener:
        tags:
            -
                # these are the basic options that define the entity listener
                name: 'doctrine.orm.entity_listener'
                event: 'postRemove'
                entity: 'App\Entity\Image'

                # set the 'lazy' option to TRUE to only instantiate listeners when they are used
                lazy: true

    App\EventListener\VichRemoveCacheListener:
        tags:
            - { name: kernel.event_listener, event: vich_uploader.pre_remove }

    App\EventListener\CreateImageCacheListener:
        tags:
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: 'App\Entity\Image' }
        arguments:
            $filterName: ['galerie_content_thumb', 'galerie_content_thumb_webp']

    App\EventListener\CreateCoverImageCacheListener:
        tags:
            - { name: doctrine.orm.entity_listener, event: postUpdate, entity: 'App\Entity\Galerie' }
            - { name: doctrine.orm.entity_listener, event: postPersist, entity: 'App\Entity\Galerie' }
        arguments:
            $filterName: 'galerie_cover_thumb'
